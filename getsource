#!/bin/bash
#Â This scripts does the following:
# * Download (or refresh) sources of XBMC for the Raspberry Pi (raspberrypi branch by huceke)
# * Prepare the orig tarball (clean-up) according to a few options:
#   * REMOVE_EXTERNAL: Remove optional external libs
#   * REMOVE_NONFREE: Remove non-free libs
#   * REMOVE_LIBS: Remove libs not necessary for Linux build
# * Create the orig tarball
# * Create the Debian source package


# Common variables
XBMC_MAJOR_VERSION="12.0"
XBMC_GIT_URL="git://github.com/xbmc/xbmc.git"
XBMC_BRANCH="origin/master"
XBMC_SOURCE="./xbmc"


get_sources() {
    # Download of refresh the sources
    local origin_url="$(GIT_DIR="${XBMC_SOURCE}/.git" git config remote.origin.url)"
    if [ -n "${origin_url}" ]; then
        echo "Refetching sources from ${origin_url}"
        GIT_DIR="${XBMC_SOURCE}/.git" git fetch origin
    else
        echo "Cloning sources from ${XBMC_GIT_URL}"
        git clone --no-checkout "${XBMC_GIT_URL}" "${XBMC_SOURCE}"
    fi

    # Create a correct version number
    GIT_REV_DATE=$(GIT_DIR="${XBMC_SOURCE}/.git" git log --abbrev=7 -1 --pretty=format:"%h %ci" ${XBMC_BRANCH} | awk '{gsub("-", "");print $2"."$1}')
    XBMC_VERSION="${XBMC_MAJOR_VERSION}~git${GIT_REV_DATE}"

    # Create the build directory
    BUILDDIR="xbmc-${XBMC_VERSION}"
    mkdir -p "${BUILDDIR}"
    GIT_DIR="${PWD}/${XBMC_SOURCE}/.git" GIT_WORK_TREE="${BUILDDIR}" git reset --hard "${XBMC_BRANCH}"
}

prepare_orig_tarball() {
    pushd ${BUILDDIR} > /dev/null

    # Add Imaging external module
    if [ -z "$REMOVE_EXTERNAL" ]; then
        curl -Ls --output lib/addons/script.module.pil/Imaging-1.1.7.tar.gz http://www.effbot.org/downloads/Imaging-1.1.7.tar.gz
    fi
    popd >/dev/null

    # Remove non-free components
    if [ ! -z "$REMOVE_NONFREE" ]; then
        echo "Removing non-free components"
        find ${BUILDDIR} -iname *dvdcss* -exec rm -rf "{}" \;
        find ${BUILDDIR} -iname *unrar* -exec rm -rf "{}" \;
    fi

    # Remove components not needed for Linux
    if [ ! -z "$REMOVE_LIBS" ]; then
        echo "Removing components not needed for Linux"
        rm -rf ${BUILDDIR}/lib/afpfs-ng
        rm -rf ${BUILDDIR}/lib/libass
        rm -rf ${BUILDDIR}/lib/libbluray
        rm -rf ${BUILDDIR}/lib/libcec
        rm -rf ${BUILDDIR}/lib/liblame
        rm -rf ${BUILDDIR}/lib/libmad
        rm -rf ${BUILDDIR}/lib/libmicrohttpd
        rm -rf ${BUILDDIR}/lib/libmodplug
        rm -rf ${BUILDDIR}/lib/libmpeg2
        rm -rf ${BUILDDIR}/lib/libnfs
        rm -rf ${BUILDDIR}/lib/librtmp
        rm -rf ${BUILDDIR}/lib/libshairport
        rm -rf ${BUILDDIR}/lib/win32
        find ${BUILDDIR} \( \( -iname *.so -o -iname *.exe -o -iname *.lib \
        -o -iname *.dll -o -iname *.dylib -o -iname *.a \
        \) -exec rm -rf "{}" \; \)
    fi

    # Remove components not needed for Linux when using external libs
    if [ ! -z "$REMOVE_EXTERNAL" ]; then
        echo "Removing components not needed for Linux when using external libs"
        rm -rf ${BUILDDIR}/lib/ffmpeg
    fi

    # Remove temp files and other cruft from source tarball
    echo "Removing temp files and other cruft from source tarball"
    find ${BUILDDIR} \( \( -type f -a \
    \( -name '#*#' -o -name '.*~' -o -name '*~' -o -name DEADJOE \
    -o -name '*.orig' -o -name '*.rej' -o -name '*.bak' \
    -o -name '.*.orig' -o -name .*.rej -o -name '.SUMS' \
    -o -name TAGS -o \( -path '*/.deps/*' -a -name '*.P' \) \
    -o -name config.status -o -name config.cache -o -name config.log \
    \) -exec rm -f "{}" \; \) -o \
    \( -type d -a -name autom4te.cache -prune -exec rm -rf "{}" \; \) \)
    rm ${BUILDDIR}/.gitignore

    # Remove empty directories
    echo "Removing empty directories"
    find ${BUILDDIR} -type d -empty -delete
}

create_tarball() {
    # Create the .orig.tar.gz tarball
    echo "Creating orig tarball"
    tar -czf xbmc-rbp_$XBMC_VERSION.orig.tar.gz ${BUILDDIR}
}

create_source_packages() {
    # Replace debian directory in build dir
    rm -rf "${BUILDDIR}/debian"
    cp -r ./debian "${BUILDDIR}"

    pushd ${BUILDDIR} > /dev/null

    # Update changelog
    dch --force-distribution -D "unstable" -b -v "${XBMC_VERSION}-1" 2>/dev/null

    # Create source package
    dpkg-buildpackage -rfakeroot -us -uc -S -sa -d

    popd > /dev/null
}


get_sources
prepare_orig_tarball
create_tarball
create_source_packages
